/**
 * Get the game folder by the game ID
 * @param  {Int}	gameId	ID of the game: 0 = AA, 1 = SH, 2 = BT
 * @return {String}			Game folder
 */
function getGameFolderByGameId(gameId) {
	switch (gameId) {
		case 0:
			return 'main';
			break;
		
		case 1:
			return 'mainta';
			break;
			
		case 2:
			return 'maintt';
			break;
			
		default:
			return 'main';
			break;
	}
}

/**
 * Show a dialog with a message to the user
 * @param  	{String}	title 	The title of the dialog
 * @param	{String}	message	The message of the dialog
 * @return 	{String}			Game folder
 */
function showDialog(title, message) {
	window.electronAPI.showDialog(title, message);
}

/**
 * Get server configuration by game ID
 * @param  	{Int}		gameId	The ID of the game:  0 = AA, 1 = SH, 2 = BT
 * @return 	{String}			Server configuration
 */
async function getConfig(gameId) {
	const gameFolder = getGameFolderByGameId(gameId);
	
	return await window.electronAPI.getConfig(gameFolder);
}

/**
 * Save server configuration for given game ID
 * @param  	{Array}		dataObject	An object containing the whole server configuration by key and value
 * @param  	{Int}		gameId		The ID of the game:  0 = AA, 1 = SH, 2 = BT
 */
function saveConfig(dataObject, gameId) {
	const time = new Date().toISOString();
	
	let config = '// Config file generated by OpenMoHAA Server Setup Utility (generation time: ' + time + ')' + "\n";
	let map = '';
	let customConfig = '';
	
	for (let [key, val] of dataObject.entries()) {	
		if (val.length == 0) continue;
		
		switch (key) {
			case 'com_target_game':
				continue;
				break;
				
			case 'custom_config':
				customConfig = val;
				continue;
				break;
				
			case 'map':
				map = val;
				break;
		}
		
		if (isNaN(val)) {
			val = '"' + val + '"'
		}
		
		config += 'set ' + key + ' ' + val + "\n";
	}
	
	config += customConfig + "\n";	
	config += 'map "' + map + '"';
	
	window.electronAPI.saveConfig(config, gameId);
	
	dispatchGlobalEvent('configSaved');
}

/**
 * Run the game server based on game ID
 * @param	{Int}	gameId	The ID of the game:  0 = AA, 1 = SH, 2 = BT
 */
function runServer(gameId) {
	window.electronAPI.runServer(gameId);
}

/**
 * Dispatch a custom event globally
 * @param	{String}	event	The name of the event
 */
function dispatchGlobalEvent(event) {
	const theEvent = document.createEvent('Event');
	theEvent.initEvent(event);
	window.dispatchEvent(theEvent);
}